<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浏览器存储</title>
    <link href="undefined2018/11/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8/"/>
    <url>2018/11/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做项目的过程中，我们经常遇到需要把信息存储在本地的情况，比如权限验证token、用户信息、埋点计数、客户配置的皮肤信息或语言种类等，我们可以暂存一下避免浏览器不必要的请求和客户多余操作，给客户使用带来方便。</p><p>那么浏览器存储有哪些方法呢，主要有<strong>cookie</strong>、<strong>localStorage</strong>、<strong>sessionStorage</strong></p><p><strong>cookie</strong>属于文档对象模型DOM树根节点document，而 <strong>sessionStorage</strong> 和 <strong>localStorage</strong> 属于浏览器对象模型BOM的对象window.</p><p>其中 <strong>sessionStorage</strong> 和 <strong>localStorage</strong> 是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API" target="_blank" rel="noopener">HTML5 Web Storage API</a> 提供的.</p><ul><li><strong>sessionStorage：</strong>为每一个给定的源（given origin）维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）</li><li><strong>localStorage：</strong>同样的功能，但是在浏览器关闭，然后重新打开后数据仍然存在。</li></ul><h2 id="1-cookie"><a href="#1-cookie" class="headerlink" title="1. cookie"></a>1. cookie</h2><p>h5之前，存储主要用cookies，缺点是在请求头上带着数据，导致流量增加。大小限制<code>4k</code>.</p><p>操作方式：</p><pre><code>document.cookie = &quot;username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT; path=/&quot;    // 设置cookiedocument.cookie = &quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;    // 删除cookie</code></pre><p>设置cookie的方法比较简单，其中有几个参数可以添加.</p><h3 id="expires"><a href="#expires" class="headerlink" title="expires"></a>expires</h3><p><strong>过期时间</strong>，当过了到期日期时，浏览器会自动删除该cookie，如果想删除一个cookie，只需要把它过期时间设置成过去的时间即可.比如希望设置过期时间一年：<code>new Date().getTime() + 365 * 24 * 60 * 60 * 1000</code></p><p>如果不设置过期时间，则表示这个cookie生命周期为浏览器会话期间，只要关闭浏览器窗口，cookie就消失了。</p><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p><strong>路径</strong>，值可以是一个目录，或者是一个路径。</p><p>如果cc.com/test/index.html 建立了一个cookie，那么在cc.com/test/目录里的所有页面，以及该目录下面任何子目录里的页面都可以访问这个cookie。因此在cc.com/test/test2/test3 里的任何页面都可以访问cc.com/test/index.html建立的cookie。若cc.com/test/ 若想访问cc.com/test/index.html设置的cookes，需要把cookies的path属性设置成“/”。<br>在指定路径的时候，凡是来自同一服务器，URL里有相同路径的所有WEB页面都可以共享cookies。</p><h3 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h3><p><strong>主机名</strong>，是指同一个域下的不同主机，例如：<a href="http://www.baidu.com和map.baidu.com就是两个不同的主机名。默认情况下，一个主机中创建的cookie在另一个主机下是不能被访问的，但可以通过domain参数来实现对其的控制：`document.cookie" target="_blank" rel="noopener">www.baidu.com和map.baidu.com就是两个不同的主机名。默认情况下，一个主机中创建的cookie在另一个主机下是不能被访问的，但可以通过domain参数来实现对其的控制：`document.cookie</a> = “name=value;domain=.baidu.com”`.<br>这样，所有*.baidu.com的主机都可以访问该cookie。</p><h2 id="2-localStorage"><a href="#2-localStorage" class="headerlink" title="2. localStorage"></a>2. localStorage</h2><p>以键值对(Key-Value)的方式存储，永久存储，永不失效，除非手动删除。IE8+支持，每个域名限制<code>5M.</code></p><p>打开同域的新页面也能访问得到</p><p>操作方式：</p><pre><code>window.localStorage.username = &#39;hehe&#39;                   // 设置window.localStorage.setItem(&#39;username&#39;, &#39;hehe&#39;)         // 设置window.localStorage.getItem(&#39;username&#39;)                 // 读取window.localStorage.removeItem(&#39;username&#39;)             // 删除window.localStorage.key(1)                             // 读取索引为1的值window.localStorage.clear()                            // 清除所有</code></pre><p>可以存储数组、数字、对象等<strong>可以被序列化为字符串</strong>的内容.</p><h2 id="3-sessionStorage"><a href="#3-sessionStorage" class="headerlink" title="3. sessionStorage"></a>3. sessionStorage</h2><p>sessionStorage操作的方法与localStroage是一样的，区别在于 sessionStorage 在关闭页面后即被清空，而 localStorage 则会一直保存。很多时候数据只需要在用户浏览一组页面期间使用，关闭窗口后数据就可以丢弃了，这种情况使用sessionStorage就比较方便。</p><p>注意，刷新页面sessionStorage不会清除，但是打开同域新页面访问不到.</p><h2 id="4-cookie、localStorage、sessionStorage之间的区别"><a href="#4-cookie、localStorage、sessionStorage之间的区别" class="headerlink" title="4. cookie、localStorage、sessionStorage之间的区别"></a>4. cookie、localStorage、sessionStorage之间的区别</h2><p>他们都是保存在浏览器端的存储方式，他们之间的区别：</p><ol><li>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。</li><li><strong>存储大小限制</strong>不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li><li><strong>数据有效期</strong>不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。</li><li><strong>作用域</strong>不同，sessionStorage不在不同的浏览器页面中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。</li><li>Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。</li><li>Web Storage 的 api 接口使用更方便，cookie的原生接口不友好，需要自己封装。</li></ol><h2 id="5-安全性"><a href="#5-安全性" class="headerlink" title="5. 安全性"></a>5. 安全性</h2><p>需要注意的是，不是什么数据都适合放在 Cookie、localStorage 和 sessionStorage 中的，因为它们保存在本地容易被篡改，使用它们的时候，需要时刻注意是否有代码存在 XSS 注入的风险。所以千万不要用它们存储你系统中的敏感数据。        </p>]]></content>
    
    
    <categories>
      
      <category>浏览器原理</category>
      
      <category>通信</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出浏览器渲染原理</title>
    <link href="undefined2018/09/12/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/"/>
    <url>2018/09/12/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>浏览器的内核是指支持浏览器运行的最核心的程序，分为两个部分的，一是渲染引擎，另一个是JS引擎。渲染引擎在不同的浏览器中也不是都相同的。目前市面上常见的浏览器内核可以分为这四种：Trident（IE）、Gecko（火狐）、Blink（Chrome、Opera）、Webkit（Safari）。这里面大家最耳熟能详的可能就是 Webkit 内核了，Webkit 内核是当下浏览器世界真正的霸主。<br>本文我们就以 Webkit 为例，对现代浏览器的渲染过程进行一个深度的剖析。</p><h2 id="页面加载过程"><a href="#页面加载过程" class="headerlink" title="页面加载过程"></a>页面加载过程</h2><p>在介绍浏览器渲染过程之前，我们简明扼要介绍下页面的加载过程，有助于更好理解后续渲染过程。</p><p>要点如下：</p><ul><li>浏览器根据 DNS 服务器得到域名的 IP 地址</li><li>向这个 IP 的机器发送 HTTP 请求</li><li>服务器收到、处理并返回 HTTP 请求</li><li>浏览器得到返回内容</li></ul><p>例如在浏览器输入<code>https://juejin.im/timeline</code>，然后经过 DNS 解析，<code>juejin.im</code>对应的 IP 是<code>36.248.217.149</code>（不同时间、地点对应的 IP 可能会不同）。然后浏览器向该 IP 发送 HTTP 请求。</p><p>服务端接收到 HTTP 请求，然后经过计算（向不同的用户推送不同的内容），返回 HTTP 请求，返回的内容如下：</p><p><a href="https://camo.githubusercontent.com/df6a6a160f52f6c4a443729e2b32876ca189acee/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f342f312f313639643437636265303365303130333f773d36383426683d31363826663d706e6726733d3831343836" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/df6a6a160f52f6c4a443729e2b32876ca189acee/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f342f312f313639643437636265303365303130333f773d36383426683d31363826663d706e6726733d3831343836" srcset="/img/loading.gif" alt="img"></a></p><p>其实就是一堆 HMTL 格式的字符串，因为只有 HTML 格式浏览器才能正确解析，这是 W3C 标准的要求。接下来就是浏览器的渲染过程。</p><h2 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h2><p><a href="https://camo.githubusercontent.com/2f8e4192ed63300d9c1d508c6936b8cda5f9fb3b/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32372f313637663035373730346239346630383f773d37303526683d32323726663d706e6726733d313630323734" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/2f8e4192ed63300d9c1d508c6936b8cda5f9fb3b/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32372f313637663035373730346239346630383f773d37303526683d32323726663d706e6726733d313630323734" srcset="/img/loading.gif" alt="img"></a></p><p>浏览器渲染过程大体分为如下三部分：</p><h3 id="1）浏览器会解析三个东西："><a href="#1）浏览器会解析三个东西：" class="headerlink" title="1）浏览器会解析三个东西："></a>1）浏览器会解析三个东西：</h3><ul><li>一是HTML/SVG/XHTML，HTML字符串描述了一个页面的结构，浏览器会把HTML结构字符串解析转换DOM树形结构。</li></ul><p><a href="https://camo.githubusercontent.com/72638d26319a92d5bc728a15d72eecb409aabceb/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f332f33312f313639643437303433376136633135613f773d35383726683d31313026663d67696626733d3938323337" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/72638d26319a92d5bc728a15d72eecb409aabceb/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f332f33312f313639643437303433376136633135613f773d35383726683d31313026663d67696626733d3938323337" srcset="/img/loading.gif" alt="img"></a></p><ul><li>二是CSS，解析CSS会产生CSS规则树，它和DOM结构比较像。</li></ul><p><a href="https://camo.githubusercontent.com/73b3a71dc3ae11960dbbd30e5e44cdd53dc2eec4/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f332f33312f313639643437386130663462643136633f773d36363426683d31343626663d706e6726733d3332383833" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/73b3a71dc3ae11960dbbd30e5e44cdd53dc2eec4/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f332f33312f313639643437386130663462643136633f773d36363426683d31343626663d706e6726733d3332383833" srcset="/img/loading.gif" alt="img"></a></p><ul><li>三是Javascript脚本，等到Javascript 脚本文件加载后， 通过 DOM API 和 CSSOM API 来操作 DOM Tree 和 CSS Rule Tree。</li></ul><p><a href="https://camo.githubusercontent.com/a2de367e10d26912b98a4206dda0f9eb847d65c5/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f332f33312f313639643437383065306133666134343f773d35373926683d31393726663d67696626733d313434303837" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/a2de367e10d26912b98a4206dda0f9eb847d65c5/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f332f33312f313639643437383065306133666134343f773d35373926683d31393726663d67696626733d313434303837" srcset="/img/loading.gif" alt="img"></a></p><h3 id="2）解析完成后，浏览器引擎会通过DOM-Tree-和-CSS-Rule-Tree-来构造-Rendering-Tree。"><a href="#2）解析完成后，浏览器引擎会通过DOM-Tree-和-CSS-Rule-Tree-来构造-Rendering-Tree。" class="headerlink" title="2）解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。"></a>2）解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。</h3><ul><li>Rendering Tree 渲染树并不等同于DOM树，渲染树只会包括需要显示的节点和这些节点的样式信息。</li><li>CSS 的 Rule Tree主要是为了完成匹配并把CSS Rule附加上Rendering Tree上的每个Element（也就是每个Frame）。</li><li>然后，计算每个Frame 的位置，这又叫layout和reflow过程。</li></ul><h3 id="3）最后通过调用操作系统Native-GUI的API绘制。"><a href="#3）最后通过调用操作系统Native-GUI的API绘制。" class="headerlink" title="3）最后通过调用操作系统Native GUI的API绘制。"></a>3）最后通过调用操作系统Native GUI的API绘制。</h3><blockquote><p>接下来我们针对这其中所经历的重要步骤详细阐述</p></blockquote><h2 id="构建DOM"><a href="#构建DOM" class="headerlink" title="构建DOM"></a>构建DOM</h2><p>浏览器会遵守一套步骤将HTML 文件转换为 DOM 树。宏观上，可以分为几个步骤：</p><p><a href="https://camo.githubusercontent.com/e822a98473c50727f4f2ef46ed2dc1f79d9113b8/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32382f313637663532363266356430616164643f773d36323326683d383826663d706e6726733d3330383134" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/e822a98473c50727f4f2ef46ed2dc1f79d9113b8/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32382f313637663532363266356430616164643f773d36323326683d383826663d706e6726733d3330383134" srcset="/img/loading.gif" alt="构建DOM的具体步骤"></a></p><ul><li>浏览器从磁盘或网络读取HTML的原始字节，并根据文件的指定编码（例如 UTF-8）将它们转换成字符串。</li></ul><p>在网络中传输的内容其实都是 0 和 1 这些字节数据。当浏览器接收到这些字节数据以后，它会将这些字节数据转换为字符串，也就是我们写的代码。</p><ul><li>将字符串转换成Token，例如：<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code>等。<strong>Token中会标识出当前Token是“开始标签”或是“结束标签”亦或是“文本”等信息</strong>。</li></ul><p>这时候你一定会有疑问，节点与节点之间的关系如何维护？</p><p>事实上，这就是Token要标识“起始标签”和“结束标签”等标识的作用。例如“title”Token的起始标签和结束标签之间的节点肯定是属于“head”的子节点。<br><a href="https://camo.githubusercontent.com/11a9f3294c5bdcec6a2de1e382b24cc10684b614/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32382f313637663534613463653134396130353f773d36373126683d31363826663d706e6726733d3533313535" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/11a9f3294c5bdcec6a2de1e382b24cc10684b614/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32382f313637663534613463653134396130353f773d36373126683d31363826663d706e6726733d3533313535" srcset="/img/loading.gif" alt="img"></a></p><p>上图给出了节点之间的关系，例如：“Hello”Token位于“title”开始标签与“title”结束标签之间，表明“Hello”Token是“title”Token的子节点。同理“title”Token是“head”Token的子节点。</p><ul><li>生成节点对象并构建DOM</li></ul><p>事实上，构建DOM的过程中，不是等所有Token都转换完成后再去生成节点对象，而是一边生成Token一边消耗Token来生成节点对象。换句话说，每个Token被生成后，会立刻消耗这个Token创建出节点对象。<strong>注意：带有结束标签标识的Token不会创建节点对象。</strong></p><p>接下来我们举个例子，假设有段HTML文本：</p><pre><code>&lt;html&gt;&lt;head&gt;    &lt;title&gt;Web page parsing&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;        &lt;h1&gt;Web page parsing&lt;/h1&gt;        &lt;p&gt;This is an example Web page.&lt;/p&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>上面这段HTML会解析成这样：</p><p><a href="https://camo.githubusercontent.com/e74e3c5913a32c7a899c669db06011e14aa3a8b0/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32382f313637663532326534643463356532623f773d34363826683d33303826663d706e6726733d313230393137" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/e74e3c5913a32c7a899c669db06011e14aa3a8b0/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32382f313637663532326534643463356532623f773d34363826683d33303826663d706e6726733d313230393137" srcset="/img/loading.gif" alt="img"></a></p><h2 id="构建CSSOM"><a href="#构建CSSOM" class="headerlink" title="构建CSSOM"></a>构建CSSOM</h2><p>DOM会捕获页面的内容，但浏览器还需要知道页面如何展示，所以需要构建CSSOM。</p><p>构建CSSOM的过程与构建DOM的过程非常相似，当浏览器接收到一段CSS，浏览器首先要做的是识别出Token，然后构建节点并生成CSSOM。<br><a href="https://camo.githubusercontent.com/0862f8004183487181f1fdf9f4c59a8b54075882/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32382f313637663535616162616364346261633f773d36373926683d383526663d706e6726733d3332393736" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/0862f8004183487181f1fdf9f4c59a8b54075882/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32382f313637663535616162616364346261633f773d36373926683d383526663d706e6726733d3332393736" srcset="/img/loading.gif" alt="img"></a><br>在这一过程中，浏览器会确定下每一个节点的样式到底是什么，并且这一过程其实是很消耗资源的。因为样式你可以自行设置给某个节点，也可以通过继承获得。在这一过程中，浏览器得递归 CSSOM 树，然后确定具体的元素到底是什么样式。</p><p><strong>注意：CSS匹配HTML元素是一个相当复杂和有性能问题的事情。所以，DOM树要小，CSS尽量用id和class，千万不要过渡层叠下去</strong>。</p><h2 id="构建渲染树"><a href="#构建渲染树" class="headerlink" title="构建渲染树"></a>构建渲染树</h2><p>当我们生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树。</p><p><a href="https://camo.githubusercontent.com/ae6a6d492332cd6332144f8e6c924d1197e26f7e/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32382f313637663536353235323166656132663f773d36383926683d33323726663d706e6726733d313235303739" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/ae6a6d492332cd6332144f8e6c924d1197e26f7e/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32382f313637663536353235323166656132663f773d36383926683d33323726663d706e6726733d313235303739" srcset="/img/loading.gif" alt="img"></a></p><p>在这一过程中，不是简单的将两者合并就行了。<strong>渲染树只会包括需要显示的节点和这些节点的样式信息</strong>，如果某个节点是 <code>display: none</code> 的，那么就不会在渲染树中显示。</p><p>我们或许有个疑惑：<strong>浏览器如果渲染过程中遇到JS文件怎么处理</strong>？</p><p>渲染过程中，如果遇到<code>&lt;script&gt;</code>就停止渲染，执行 JS 代码。因为浏览器有GUI渲染线程与JS引擎线程，为了防止渲染出现不可预期的结果，这两个线程是互斥的关系。JavaScript的加载、解析与执行会阻塞DOM的构建，也就是说，在构建DOM时，HTML解析器若遇到了JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JavaScript引擎运行完毕，浏览器再从中断的地方恢复DOM构建。</p><p>也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性（下文会介绍这两者的区别）。</p><p><strong>JS文件不只是阻塞DOM的构建，它会导致CSSOM也阻塞DOM的构建</strong>。</p><p>原本DOM和CSSOM的构建是互不影响，井水不犯河水，但是一旦引入了JavaScript，CSSOM也开始阻塞DOM的构建，只有CSSOM构建完毕后，DOM再恢复DOM构建。</p><p>这是什么情况？</p><p>这是因为JavaScript不只是可以改DOM，它还可以更改样式，也就是它可以更改CSSOM。因为不完整的CSSOM是无法使用的，如果JavaScript想访问CSSOM并更改它，那么在执行JavaScript时，必须要能拿到完整的CSSOM。所以就导致了一个现象，如果浏览器尚未完成CSSOM的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟脚本执行和DOM构建，直至其完成CSSOM的下载和构建。也就是说，<strong>在这种情况下，浏览器会先下载和构建CSSOM，然后再执行JavaScript，最后在继续构建DOM</strong>。</p><p><a href="https://camo.githubusercontent.com/13fc7d779004098ba4568b81920da5857a8b5ec7/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f342f322f313639646562646430396565636361613f773d36383926683d32303926663d706e6726733d3531333132" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/13fc7d779004098ba4568b81920da5857a8b5ec7/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f342f322f313639646562646430396565636361613f773d36383926683d32303926663d706e6726733d3531333132" srcset="/img/loading.gif" alt="img"></a></p><h2 id="布局与绘制"><a href="#布局与绘制" class="headerlink" title="布局与绘制"></a>布局与绘制</h2><p>当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。</p><p>布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸，所有相对测量值都将转换为屏幕上的绝对像素。</p><p>布局完成后，浏览器会立即发出“Paint Setup”和“Paint”事件，将渲染树转换成屏幕上的像素。</p><blockquote><p>以上我们详细介绍了浏览器工作流程中的重要步骤，接下来我们讨论几个相关的问题：</p></blockquote><h2 id="几点补充说明"><a href="#几点补充说明" class="headerlink" title="几点补充说明"></a>几点补充说明</h2><h3 id="1-async和defer的作用是什么？有什么区别"><a href="#1-async和defer的作用是什么？有什么区别" class="headerlink" title="1.async和defer的作用是什么？有什么区别?"></a>1.async和defer的作用是什么？有什么区别?</h3><p>接下来我们对比下 defer 和 async 属性的区别：</p><p><a href="https://camo.githubusercontent.com/78835bfd6ba8899decaabec54b713bced79907c2/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f362f31362f313634303635366537303736356163373f773d36383926683d31313226663d6a70656726733d3136383935" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/78835bfd6ba8899decaabec54b713bced79907c2/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f362f31362f313634303635366537303736356163373f773d36383926683d31313226663d6a70656726733d3136383935" srcset="/img/loading.gif" alt="async和defer"></a></p><p>其中蓝色线代表JavaScript加载；红色线代表JavaScript执行；绿色线代表 HTML 解析。</p><h3 id="1）情况1-lt-script-src-quot-script-js-quot-gt-lt-script-gt"><a href="#1）情况1-lt-script-src-quot-script-js-quot-gt-lt-script-gt" class="headerlink" title="1）情况1&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;"></a>1）情况1<code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code></h3><p>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。</p><h3 id="2）情况2-lt-script-async-src-quot-script-js-quot-gt-lt-script-gt-异步下载"><a href="#2）情况2-lt-script-async-src-quot-script-js-quot-gt-lt-script-gt-异步下载" class="headerlink" title="2）情况2&lt;script async src=&quot;script.js&quot;&gt;&lt;/script&gt; (异步下载)"></a>2）情况2<code>&lt;script async src=&quot;script.js&quot;&gt;&lt;/script&gt;</code> (<strong>异步下载</strong>)</h3><p>async 属性表示异步执行引入的 JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行——无论此刻是 HTML 解析阶段还是 DOMContentLoaded 触发之后。需要注意的是，这种方式加载的 JavaScript 依然会阻塞 load 事件。换句话说，async-script 可能在 DOMContentLoaded 触发之前或之后执行，但一定在 load 触发之前执行。</p><h3 id="3）情况3-lt-script-defer-src-quot-script-js-quot-gt-lt-script-gt-延迟执行"><a href="#3）情况3-lt-script-defer-src-quot-script-js-quot-gt-lt-script-gt-延迟执行" class="headerlink" title="3）情况3 &lt;script defer src=&quot;script.js&quot;&gt;&lt;/script&gt;(延迟执行)"></a>3）情况3 <code>&lt;script defer src=&quot;script.js&quot;&gt;&lt;/script&gt;</code>(<strong>延迟执行</strong>)</h3><p>defer 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。整个 document 解析完毕且 defer-script 也加载完成之后（这两件事情的顺序无关），会执行所有由 defer-script 加载的 JavaScript 代码，然后触发 DOMContentLoaded 事件。</p><p>defer 与相比普通 script，有两点区别：<strong>载入 JavaScript 文件时不阻塞 HTML 的解析，执行阶段被放到 HTML 标签解析完成之后。在加载多个JS脚本的时候，async是无顺序的加载，而defer是有顺序的加载。</strong></p><h3 id="2-为什么操作-DOM-慢"><a href="#2-为什么操作-DOM-慢" class="headerlink" title="2.为什么操作 DOM 慢"></a>2.为什么操作 DOM 慢</h3><p>把 DOM 和 JavaScript 各自想象成一个岛屿，它们之间用收费桥梁连接。——《高性能 JavaScript》</p><p>JS 是很快的，在 JS 中修改 DOM 对象也是很快的。在JS的世界里，一切是简单的、迅速的。但 DOM 操作并非 JS 一个人的独舞，而是两个模块之间的协作。</p><p>因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当我们用 JS 去操作 DOM 时，本质上是 JS 引擎和渲染引擎之间进行了“跨界交流”。这个“跨界交流”的实现并不简单，它依赖了桥接接口作为“桥梁”（如下图）。</p><p><a href="https://camo.githubusercontent.com/893b42df58916e5f473947f19db42ce3931b4188/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f342f332f313639653364633063346134333866643f773d35373826683d31383826663d706e6726733d3431323633" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/893b42df58916e5f473947f19db42ce3931b4188/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f342f332f313639653364633063346134333866643f773d35373826683d31383826663d706e6726733d3431323633" srcset="/img/loading.gif" alt="img"></a></p><p>过“桥”要收费——这个开销本身就是不可忽略的。我们每操作一次 DOM（不管是为了修改还是仅仅为了访问其值），都要过一次“桥”。过“桥”的次数一多，就会产生比较明显的性能问题。因此“减少 DOM 操作”的建议，并非空穴来风。</p><h3 id="3-你真的了解回流和重绘吗"><a href="#3-你真的了解回流和重绘吗" class="headerlink" title="3.你真的了解回流和重绘吗"></a>3.你真的了解回流和重绘吗</h3><p>渲染的流程基本上是这样（如下图黄色的四个步骤）：1.计算CSS样式 2.构建Render Tree 3.Layout – 定位坐标和大小 4.正式开画<br><a href="https://camo.githubusercontent.com/1a81ec348a720a4e1682432accc800e5a215106e/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32382f313637663036386534646536633763653f773d37313326683d31393526663d706e6726733d313433383132" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/1a81ec348a720a4e1682432accc800e5a215106e/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32382f313637663036386534646536633763653f773d37313326683d31393526663d706e6726733d313433383132" srcset="/img/loading.gif" alt="img"></a></p><p>注意：上图流程中有很多连接线，这表示了Javascript动态修改了DOM属性或是CSS属性会导致重新Layout，但有些改变不会重新Layout，就是上图中那些指到天上的箭头，比如修改后的CSS rule没有被匹配到元素。</p><p>这里重要要说两个概念，一个是Reflow，另一个是Repaint</p><ul><li>重绘：当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示的回流环节）。</li><li>回流：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）</li></ul><p>我们知道，当网页生成的时候，至少会渲染一次。在用户访问的过程中，还会不断重新渲染。重新渲染会重复回流+重绘或者只有重绘。<br><strong>回流必定会发生重绘，重绘不一定会引发回流</strong>。重绘和回流会在我们设置节点样式时频繁出现，同时也会很大程度上影响性能。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。</p><h3 id="1）常见引起回流属性和方法"><a href="#1）常见引起回流属性和方法" class="headerlink" title="1）常见引起回流属性和方法"></a>1）常见引起回流属性和方法</h3><p>任何会改变元素几何信息(元素的位置和尺寸大小)的操作，都会触发回流，</p><ul><li>添加或者删除可见的DOM元素；</li><li>元素尺寸改变——边距、填充、边框、宽度和高度</li><li>内容变化，比如用户在input框中输入文字</li><li>浏览器窗口尺寸改变——resize事件发生时</li><li>计算 offsetWidth 和 offsetHeight 属性</li><li>设置 style 属性的值</li></ul><h3 id="2）常见引起重绘属性和方法"><a href="#2）常见引起重绘属性和方法" class="headerlink" title="2）常见引起重绘属性和方法"></a>2）常见引起重绘属性和方法</h3><p><a href="https://camo.githubusercontent.com/3a47ae7448b98eb5bf0152af6c0816b1ff103bb6/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f312f312f313638303964386536343832623831333f773d35353426683d32333526663d706e6726733d3132303735" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/3a47ae7448b98eb5bf0152af6c0816b1ff103bb6/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031392f312f312f313638303964386536343832623831333f773d35353426683d32333526663d706e6726733d3132303735" srcset="/img/loading.gif" alt="img"></a></p><h3 id="3）如何减少回流、重绘"><a href="#3）如何减少回流、重绘" class="headerlink" title="3）如何减少回流、重绘"></a>3）如何减少回流、重绘</h3><ul><li>使用 transform 替代 top</li><li>使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流（改变了布局）</li><li>不要把节点的属性值放在一个循环里当成循环里的变量。</li></ul><pre><code>for(let i = 0; i &lt; 1000; i++) {    // 获取 offsetTop 会导致回流，因为需要去获取正确的值    console.log(document.querySelector(&#39;.test&#39;).style.offsetTop)}</code></pre><ul><li>不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</li><li>动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 requestAnimationFrame</li><li>CSS 选择符从右往左匹配查找，避免节点层级过多</li><li>将频繁重绘或者回流的节点设置为图层，图层能够阻止该节点的渲染行为影响别的节点。比如对于 video 标签来说，浏览器会自动将该节点变为图层。</li></ul><h2 id="性能优化策略"><a href="#性能优化策略" class="headerlink" title="性能优化策略"></a>性能优化策略</h2><p>基于上面介绍的浏览器渲染原理，DOM 和 CSSOM 结构构建顺序，初始化可以对页面渲染做些优化，提升页面性能。</p><ul><li>JS优化：</li></ul><pre><code>  &lt;script&gt;</code></pre><p>  标签加上 defer属性 和 async属性 用于在不阻塞页面文档解析的前提下，控制脚本的下载和执行。</p><ul><li>defer属性： 用于开启新的线程下载脚本文件，并使脚本在文档解析完成后执行。</li><li>async属性： HTML5新增属性，用于异步下载脚本文件，下载完毕立即解释执行代码。</li></ul><ul><li>CSS优化： <code>&lt;link&gt;</code> 标签的 rel属性 中的属性值设置为 preload 能够让你在你的HTML页面中可以指明哪些资源是在页面加载完成后即刻需要的,最优的配置加载顺序，提高渲染性能</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上所述，我们得出这样的结论：</p><ul><li>浏览器工作流程：构建DOM -&gt; 构建CSSOM -&gt; 构建渲染树 -&gt; 布局 -&gt; 绘制。</li><li>CSSOM会阻塞渲染，只有当CSSOM构建完毕后才会进入下一个阶段构建渲染树。</li><li>通常情况下DOM和CSSOM是并行构建的，但是当浏览器遇到一个不带defer或async属性的script标签时，DOM构建将暂停，如果此时又恰巧浏览器尚未完成CSSOM的下载和构建，由于JavaScript可以修改CSSOM，所以需要等CSSOM构建完毕后再执行JS，最后才重新DOM构建。</li></ul>]]></content>
    
    
    <categories>
      
      <category>浏览器原理</category>
      
      <category>通信</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http报文</title>
    <link href="undefined2018/07/06/http%E6%8A%A5%E6%96%87/"/>
    <url>2018/07/06/http%E6%8A%A5%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ul><li>无连接：请求完成就要断开</li><li>无状态：下次再次请求，服务端不知道该次连接是不是当前用户。</li></ul><h3 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h3><pre><code>【请求报文】请求行：GET / /HTTP/1.1 （请求方式 请求路径 协议版本）请求头: 一堆key val空行请求体:数据部分【响应报文】状态行 HTTP/1.1 200 ok （协议版本 状态码 状态信息）响应头 一堆key val，里面有mime类型，告诉浏览器如何解析该资源空行响应体 就是我们请求的数据</code></pre><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><pre><code>GET -----&gt; 获取资源POST -----&gt; 传输资源PUT -----&gt; 更新资源DELETE -----&gt; 删除资源HEAD -------&gt; 获取报文首部</code></pre><h3 id="post-amp-get"><a href="#post-amp-get" class="headerlink" title="post&amp;get"></a>post&amp;get</h3><pre><code>1.get在浏览器回退是无害的，post则再次提交数据2.GET的URL地址可被收藏，post no3.GET请求的资源会被缓存，POST no4.GET只能进行URL编码，post 多种5.GET的参数是长度限制2k,POST no6.GET在URL上传参，POST在请求报文的请求体上。</code></pre><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><pre><code>1xx:请求已接收，继续操作2xx:成功200：请求成功206：带有Range头GET请求，带有范围的请求。3xx:重定向：重新指向到一个新的URL304：客服端发现有缓存文件，发出请求，服务端告诉客户端，该缓存还可以使用。4xx:服务端错误，语法错误或无法获取到400：客户端请求有语法错误，不能服务端理解403：被禁止访问404：no find5xx:服务器报错</code></pre><h3 id="持久链接"><a href="#持久链接" class="headerlink" title="持久链接"></a>持久链接</h3><ul><li>HTTP无连接，请求完成就会断开。只是普通模式</li><li>1.1版本：使用keep-alive持久连接，请求完成后继续请求，不会再次建立连接</li></ul><h3 id="管线化"><a href="#管线化" class="headerlink" title="管线化"></a>管线化</h3><ul><li>持久连接,请求后不会断开：请求1–&gt;响应1–&gt;请求2–&gt;响应2，但不是说我请求1就回来1。而是 我这(请求123)打包请求，(响应123)打包回来。</li><li>协议：1.1</li><li>浏览器默认是不开启的</li><li>要求对服务端对管线化的请求不失败即可。</li></ul>]]></content>
    
    
    <categories>
      
      <category>ajax</category>
      
      <category>http协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通信类(同源与跨域)</title>
    <link href="undefined2018/04/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%9A%E4%BF%A1%20%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F/"/>
    <url>2018/04/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%9A%E4%BF%A1%20%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="通信类-同源与跨域"><a href="#通信类-同源与跨域" class="headerlink" title="通信类(同源与跨域)"></a>通信类(同源与跨域)</h1><h3 id="什么是同源策略及限制"><a href="#什么是同源策略及限制" class="headerlink" title="什么是同源策略及限制"></a>什么是同源策略及限制</h3><pre><code>源：HTTP协议、IP、端口。限制:不是一个源的文档，没有权力操作另外一个源的文档。方面：1.无法操作cookie.localStorage和indexDB2.DOM无法获取3.AJAX不能发送</code></pre><h3 id="前后端是如何通信的"><a href="#前后端是如何通信的" class="headerlink" title="前后端是如何通信的"></a>前后端是如何通信的</h3><ul><li>ajax:同源下的通信</li><li>websocket:不受同源策略的限制</li><li>CORS：支持同源，也支持跨域。</li></ul><h3 id="如何创建ajax"><a href="#如何创建ajax" class="headerlink" title="如何创建ajax"></a>如何创建ajax</h3><pre><code>【拿到xhr】var httpobj = null;try {  httpobj = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;);}// catch (e) {  try {    httpobj = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);  }  //   catch (e1) {    httpobj = new XMLHttpRequest();  }}var xhr = httpobj;// 开启xhr.open(&quot;post&quot;, &quot;xxx&quot;, true);// 设置请求头xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded;&quot;);// 拼接数据var content = &#39;&#39;;for (var key in daya) {  content += key + &#39;=&#39; + daya[key] + &#39;&amp;&#39;;}content = content.slice(0, content.length - 1);// 发送xhr.send(content);// 响应：// xhr.onreadystatechangexhr.onload = function() {   // xhr.status == 200||xhr.status == 304||xhr.status == 206  if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) {    JSON.parse(xhr.responseText)  }};</code></pre><ul><li>axios请求的设置</li></ul><pre><code>【1】前端：axios默认的请求内容类型：Content-Type: application/json;charset=UTF-8后台：app.use(bodyParser.json());【2】前端：axios.defaults.headers.post[&#39;Content-Type&#39;] = &#39;application/x-www-form-urlencodedlet param = new URLSearchParams();param.append(&#39;name&#39;, me.obj.name);param.append(&#39;ps&#39;, me.obj.ps);me.$ajax({data: param})后台：app.use(bodyParser.urlencoded({ extended: false }));</code></pre><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><ul><li>JSONP：非正式传输协议。</li><li>发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如<code>&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;</code>;</li><li>就是本地写好回调函数，动态生成一个script标签，写入src的路径把函数名传过去，说到底回来的脚本，里面执行的代码就是执行这个函数。相当于是异步加载JS，异步执行我们已经写好的回调函数。</li><li>ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加script标签来调用服务器提供的js脚本。</li></ul><pre><code>// 得到航班信息查询结果后的回调函数var flightHandler = function(data){    alert(&#39;你查询的航班结果是：票价 &#39; + data.price + &#39; 元，&#39; + &#39;余票 &#39; + data.tickets + &#39; 张。&#39;);};// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）var url = &quot;http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler&quot;;// 创建script标签，设置其属性var script = document.createElement(&#39;script&#39;);script.setAttribute(&#39;src&#39;, url);// 把script标签加入head，此时调用开始document.getElementsByTagName(&#39;head&#39;)[0].appendChild(script);</code></pre><ul><li>hash:就是<a href="http://www.baidu.com/#号后面的值，改变时不会刷新页面的。" target="_blank" rel="noopener">www.baidu.com/#号后面的值，改变时不会刷新页面的。</a></li><li>(<a href="http://www.baidu.com/?search=10,改变search后面的值页面就会刷新。" target="_blank" rel="noopener">www.baidu.com/?search=10,改变search后面的值页面就会刷新。</a>)</li><li>实现：A页面里,通过iframe引入B页面。在A页面的JS拿到B的iframe的src,修改值。在B页面的JS内写onhashchange的响应函数，拿到A传的数据</li></ul><pre><code>【A页面】var iframe_b = document.getElementById(&#39;iframe_b&#39;);iframe_b.src = iframe_b.src + &#39;#user=admin&#39;;【B页面】监听window.onhashchange = function () {    var data = window.location.hash;};</code></pre><ul><li>postMessage:H5中东西</li></ul><pre><code>【A页面】window.postMessage(data,&quot;http://B.html&quot;);【B页面】window.addEventListener(&quot;message&quot;,function(ev){  ev.origin // http://A.html  ev.source // A页面的window  ev.data. },false);</code></pre><ul><li>WebSocket: 我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</li><li>CORS:通信标准。可理解为支持跨域通信的AJAX。浏览器在识别发送一个跨域请求时，会在头部加一个orgin，支持跨域通信。</li></ul><pre><code>res.writeHead(200, {    &quot;Content-Type&quot;: &quot;text/html; charset=UTF-8&quot;,    &quot;Access-Control-Allow-Origin&quot;:&#39;http://localhost&#39;,    &#39;Access-Control-Allow-Methods&#39;: &#39;GET, POST, OPTIONS&#39;,    &#39;Access-Control-Allow-Headers&#39;: &#39;X-Requested-With, Content-Type&#39;});app.all(&#39;*&#39;, function(req, res, next) {    res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Requested-With,Content-Type&quot;);    res.header(&quot;Access-Control-Allow-Methods&quot;,&quot;PUT,POST,GET,DELETE,OPTIONS&quot;);    next();});</code></pre><ul><li>前端webpack/browserify设置服务代理</li></ul><h3 id="敲入URL发生的事情"><a href="#敲入URL发生的事情" class="headerlink" title="敲入URL发生的事情"></a>敲入URL发生的事情</h3><ul><li>1.用户输入URL地址</li><li>2.浏览器解析URL解析出主机名</li><li>3.浏览器将主机名转换成服务器ip地址（浏览器先查找本地DNS缓存列表 没有的话 再向浏览器默认的DNS服务器发送查询请求 同时缓存）</li><li>4.浏览器将端口号从URL中解析出来</li><li>5.浏览器建立一条与目标Web服务器的TCP连接（三次握手）</li><li>6.浏览器向服务器发送一条HTTP请求报文</li><li>7.服务器向浏览器返回一条HTTP响应报文</li><li>8.关闭连接 浏览器解析文档</li><li>9.如果文档中有资源 重复6 7 8 动作 直至资源全部加载完毕</li></ul><h3 id="TCP连接三次握手"><a href="#TCP连接三次握手" class="headerlink" title="TCP连接三次握手"></a>TCP连接三次握手</h3><ul><li>A:我说的话，你听见了么？</li><li>B：听见了，我说的你听见了么？（回复A的问题，提出自己的问题）；</li><li>A：听见了，我们开始说话吧。</li></ul>]]></content>
    
    
    <categories>
      
      <category>浏览器原理</category>
      
      <category>通信</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Promise封装ajax</title>
    <link href="undefined2018/03/17/%E4%BD%BF%E7%94%A8promise%E5%B0%81%E8%A3%85ajax/"/>
    <url>2018/03/17/%E4%BD%BF%E7%94%A8promise%E5%B0%81%E8%A3%85ajax/</url>
    
    <content type="html"><![CDATA[<h2 id="使用promise封装ajax"><a href="#使用promise封装ajax" class="headerlink" title="使用promise封装ajax"></a>使用promise封装ajax</h2><pre><code class="js">function fetch(method, url, data){    return new Promise((resolve, reject) =&gt; {        var xhr = new XMLHttpRequest();        var method = method || &quot;GET&quot;;        var data = data || null;        xhr.open(method, url, true);        xhr.onreadystatechange = function() {            if(xhr.status === 200 &amp;&amp; xhr.readyState === 4){                resolve(xhr.responseText);            } else {                reject(xhr.responseText);            }        }        xhr.send(data);        })}// 使用fetch(&quot;GET&quot;, &quot;/some/url.json&quot;, null).then(result =&gt; {    console.log(result);})// 封装 nodejs error first 回调function readFile(url) {    return new Promise((resolve, reject) =&gt; {       fs.readFile(url,&#39;utf8&#39;, (err, data) =&gt; {        if(err) {            reject(err);            return;        }        resolve(data)        })     })}</code></pre><h1 id="axios封装"><a href="#axios封装" class="headerlink" title="axios封装"></a>axios封装</h1><pre><code class="js">const instance = axios.create({        baseURL:&#39;设置基准地址&#39;,    transformResponse:[(data)=&gt;{           //最大安全数值的处理        try {            return JSONBIG.parse(data)        } catch(e) {            return data        }    }]})//配置请求拦截器instance.interceptors.request.use(config =&gt; {  if (store.state.auth.token) {    config.headers.Authorization = `Bearer ${store.state.auth.token}`  }  return config}, err =&gt; Promise.reject(err))//配置响应拦截器instance.interceptors.response.use(res =&gt; {  try {    return res.data.data  } catch (e) {    return res.data  }}, err =&gt; {  // TODO token失效处理  return Promise.reject(err)})//导出函数 用于调用接口export default (url, methods, data) =&gt; {    return instance({        url,        methods,        [methods.toLowerCase()===&#39;get&#39;?&#39;params&#39;:&#39;data&#39;]:data    })}</code></pre>]]></content>
    
    
    <categories>
      
      <category>Es6语法</category>
      
      <category>ajax</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>